import json
import os
from typing import Dict, List, Optional

import requests
from loguru import logger
from uac.agents.agent_builder import AgentBuilder
from uac.configs.config import Config
from uac.human_preference.user_database import UserInfoManagement
from uac.retrieval.retrieval_system import Retrieval


class RouterResult:
    """
    RouterResult object to hold the result of the router pipeline.

    Args:
        content (str): The content generated by the agent.
        content_extraction (Optional[str]): The extracted content from recall.
        arguments (Dict): Additional arguments generated by the agent.
    """

    def __init__(self, content: str, content_extraction: Optional[str], arguments: Dict):
        self.content = content
        self.content_extraction = content_extraction
        self.arguments = arguments


class RouterPipeline:
    """
    Router pipeline that processes user input and routes it to the appropriate module based on the context.

    Args:
        config (Config): Configuration object.
        retrieval (IRetrieval): Instance of the Retrieval class.
        agent_builder (AgentBuilder): Instance of the AgentBuilder class.

    Attributes:
        config (Config): Configuration object.
        agent_builder (AgentBuilder): Instance of the AgentBuilder class.
        retrieval (IRetrieval): Instance of the Retrieval class for managing recall processes.
    """

    def __init__(self, config: Config, agent_builder: AgentBuilder) -> None:
        self.config = config  # Use the config passed in
        self.agent_builder = agent_builder  # Inject agent builder

    async def run(self, user_input: str, history_chat) -> RouterResult:
        """
        Runs the router pipeline to process user input and generate a response.

        Args:
            user_input (str): The user's input message.

        Returns:
            RouterResult: The generated response from the router.
        """
        content_extraction = None

        # Get the agent and generate a response
        manager_agent = self.agent_builder.get_agent("ManagerAgent")
        content, arguments = await manager_agent.run_agent(user_input, history_chat)

        logger.success(f"Function call: {content} | Arguments: {arguments}")
        return RouterResult(content, content_extraction, arguments)


class EndToEndRouter:
    """
    End-to-end router that processes user input and routes it to appropriate tools.

    Args:
        config (Config): Configuration object.
        retrieval (IRetrieval): Instance of the retrieval class.
        agent_builder (AgentBuilder): Instance of the AgentBuilder class.
        user_id (str): Unique identifier for the user.

    Attributes:
        router_pipeline (RouterPipeline): Instance of the RouterPipeline class.
        agent_builder (AgentBuilder): Instance of the AgentBuilder class.
        user_id (str): Unique identifier for the user.
    """

    def __init__(self, config: Config, embedding_fn, rerank_model=None, user_id: str = None):
        self.config = config

        self.database_retrieval = Retrieval(
            config=config, topk=config.topk, embedding_fn=embedding_fn, rerank_model=rerank_model
        )

        self.agent_builder = AgentBuilder(config=config)

        self.router_pipeline = RouterPipeline(
            config=config,
            agent_builder=self.agent_builder,
        )
        self.user_info_management = UserInfoManagement(config=config)

        if config.bot_type == "uac":
            self.user_info = self.user_info_management.find_one(
                query={"user_id": user_id}, output_field=None
            )
        else:
            self.user_info = None

    async def route(
        self,
        router_content: str,
        user_input: str,
        history_chat: List = None,
        retrieval_context: str = None,
        arguments: Dict = None,
    ) -> str:
        """
        Routes the user input to the appropriate tool based on the router content.

        Args:
            router_content (str): The type of tool to use.
            user_input (str): The user's input message.
            history_chat (List[Dict], optional): The conversation history. Defaults to None.
            retrieval_context (str, optional): The retrieved context information. Defaults to None.
            arguments (Dict, optional): Additional arguments. Defaults to None.

        Returns:
            str: The response generated by the appropriate tool.
        """
        global response

        if self.user_info is None:
            human_preference = ""
        else:
            human_preference = f"tên người dùng: {self.user_info['user_name']}, số điện thoại: {self.user_info['phone_number']}, địa chỉ email: {self.user_info['email']}"

        if router_content == "QuestionAnswering":

            candidates = await self.database_retrieval.retrieve(
                query=user_input, history_chat=history_chat
            )

            if not candidates:
                response = (
                    "Câu hỏi này nằm ngoài phạm vi kiến thức của tôi. "
                    "Xin lỗi vì sự bất tiện này. Tôi sẽ kết nối đến phòng tư vấn sớm nhất. "
                    "Vui lòng truy cập đường dẫn: [canbotuyensinh](http://103.119.132.170:6789/). "
                    "Hy vọng bạn sẽ nhận được những thông tin cần thiết cho việc tuyển sinh của bạn. "
                    "Cảm ơn bạn đã sử dụng dịch vụ của chúng tôi."
                )
            else:
                context_extracted = "\n".join(candidates)

                agent_master = self.agent_builder.get_agent(agent_name=router_content)
                response = agent_master.run_agent(
                    user_input,
                    history_chat,
                    retrieval_context=context_extracted,
                    human_preference=human_preference,
                )
            return response
        else:
            agent_master = self.agent_builder.get_agent(agent_name="OutOfDomain")
            return agent_master.run_agent(
                user_input,
                history_chat,
                retrieval_context=human_preference
            )

    async def run(self, user_input: str, history_chat: List[Dict]) -> str:
        """
        Runs the end-to-end router to process the user input and generate a response.

        Args:
            user_input (str): The user's input message.
            history_chat (List[Dict]): The conversation history.

        Returns:
            str: The generated response.
        """
        # Call the RouterPipeline's run method to get routing information
        router_result = await self.router_pipeline.run(user_input, history_chat)

        # Route the request to the appropriate agent based on router content
        tool_content = await self.route(
            router_content=router_result.content,
            user_input=user_input,
            history_chat=history_chat,
            retrieval_context=router_result.content_extraction,
            arguments=router_result.arguments,
        )

        return tool_content
